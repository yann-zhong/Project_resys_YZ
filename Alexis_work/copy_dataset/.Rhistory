# Load required libraries and open vignettes
# (A vignette is a long-form guide to your package.)
library(igraph)
# Installation of required packages, only run if not installed yet
# RTN for inferring the regulatory network based on the downloaded gene expression data
# snow for parallel processing in RTN
# RedeR for better visualization of inferred network
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# For main code
BiocManager::install("RTN")
BiocManager::install("snow")
BiocManager::install("RedeR")
# For preprocessing
BiocManager::install("Biobase")
BiocManager::install("GEOquery")
# Load required libraries and open vignettes
# (A vignette is a long-form guide to your package.)
library(igraph)
library(RTN)
library(snow)
library(RedeR)
browseVignettes('RTN')
browseVignettes('RedeR')
# Note: no vignettes for snow, use snow.pdf found at https://cran.r-project.org/web/packages/snow/index.html
# For preprocessing
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2) # to prevent size connection error on getGEO
readr::local_edition(1) # to prevent row.names error on getGEO
# load series and platform data from GEO
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2) # to prevent size connection error on getGEO
readr::local_edition(1) # to prevent row.names error on getGEO
# load series and platform data from GEO
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2) # to prevent size connection error on getGEO
local_edition(1) # to prevent row.names error on getGEO
# load series and platform data from GEO
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2) # to prevent size connection error on getGEO
testthat::local_edition(1) # to prevent row.names error on getGEO
# load series and platform data from GEO
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2) # to prevent size connection error on getGEO
test_that::local_edition(1) # to prevent row.names error on getGEO
library(Biobase)
library(Biobase)
library(GEOquery)
#Charger des bibliothèques utiles
gset <- getGEO("GSE21257", GSEMatrix =TRUE, AnnotGPL=FALSE)
#Charge les donnés GSE21257 depuis GEO, gset est une liste avec un seul élément dedans: GSE21257_series_matrix.txt.gz
#Ce seul élément contient les infos des expériences mentionnées dans le papier sur l'osteosarcome
if (length(gset) > 1) idx <- grep("GPL10295", attr(gset, "names")) else idx <- 1
#S'il y a plus d'un élément dans gset on cherche les indices de ceux dont le mot "GPL10295" dans leur nom
#On met ces nombres dans une liste nommée idx, dans notre cas comme il n'ya qu'un élément idx = 1
gset <- gset[[idx]]
#On ne garde que les éléments qui match nos critères
ex <- exprs(gset)
#Récupère la matrice d'écart type
exprs(gset) <- log2(ex)
#Puis met toutes ces valeurs au log2
annotation <- read.csv(file = 'GPL10295-tbl-1.txt', skip = 7, sep = '\t')
#Lit le fichier "GPL10295-tbl-1.txt" et le charge dans "annotation", saute les 7 premières lignes
#annotation contient 7 éléments: ID, Illumina_Probe ID, Illumina_Gene, Search key, GB_ACC, Symbol, et Sequence
names(annotation)<-c("ID","Illumina_Probe ID", "Illumina_Gene", "Search key", "GB_ACC", "Symbol", "Sequence")
#set les bon noms de colonnes pour annotation
gexpIDs <- annotation[c('ID', 'Illumina_Gene', 'Symbol')]
#met dans gexpIDS les colonnes ID, Illumina_Gene, et Symbol
# Start RTN
library(RTN)
#Charger la bibliothèque et les packages qui viennent avec
data(tniData)
#Charge dans l'environnement le dataset "tniData"
#???????????????
#data(dt4rtn)
#sensé faire la mm chose que data(tniData) mais avec le dataset dt4rtn, mais ce set n'exitse pas dans data()
#???????????????
annotation <- read.csv(file = 'GPL10295-tbl-1.txt', skip = 7, sep = '\t')
setwd("C:/Users/Alexis Trang/Documents/Cours_UPMC_M2/RESYS/projet/copy_dataset")
annotation <- read.csv(file = 'GPL10295-tbl-1.txt', skip = 7, sep = '\t')
#Lit le fichier "GPL10295-tbl-1.txt" et le charge dans "annotation", saute les 7 premières lignes
#annotation contient 7 éléments: ID, Illumina_Probe ID, Illumina_Gene, Search key, GB_ACC, Symbol, et Sequence
#names(annotation)<-c("ID","Illumina_Probe ID", "Illumina_Gene", "Search key", "GB_ACC", "Symbol", "Sequence")
#set les bon noms de colonnes pour annotation
gexpIDs <- annotation[c('ID', 'Illumina_Gene', 'Symbol')]
View(gexpIDs)
# Start RTN
library(RTN)
#Charger la bibliothèque et les packages qui viennent avec
data(tniData)
#???????????????
data(dt4rtn)
#???????????????
data(dt4rtn_TFs)
# Start RTN
library(RTN)
data()
#???????????????
data(dt4rtn)
data("dt4rtn", package = "RTN")
library(fs)
data(dt4rtn)
tfs <- read.table("dt4rtn_TFs.txt")
tfs <- read.table("dt4rtn_TFs.txt")
tfs = setNames(tfs$V2, tfs$V1)
names(tfs) -> bkp
tfs <- annotation$ID[match(names(tfs), annotation$Symbol)]
tfs <- as.character(tfs)
names(tfs) <- bkp
tfs <- tfs[-which(is.na(tfs))]
rtni <- tni.constructor(expData=ex, regulatoryElements=tfs, rowAnnotation=gexpIDs, cvfilter=T)
tfs <- read.table("dt4rtn_TFs.txt")
tfs
#lit le fichier txt et le met dans une variable "tfs"
tfs = setNames(tfs$V2, tfs$V1)
tfs
View(rtni)
rtni
rtni[1]
tfs <- read.table("dt4rtn_TFs.txt")
View(tfs)
