load("~/Cours_UPMC_M2/RESYS/Alexis_work/Environement_16_11_2021_02_39.RData")
View(gset)
# Load required libraries and open vignettes
# (A vignette is a long-form guide to your package.)
library(igraph)
library(RTN)
library(snow)
library(RedeR)
browseVignettes('RTN')
browseVignettes('RedeR')
# Note: no vignettes for snow, use snow.pdf found at https://cran.r-project.org/web/packages/snow/index.html
# For preprocessing
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2) # to prevent size connection error on getGEO
#readr::local_edition(1) # to prevent row.names error on getGEO
gset <- getGEO("GSE21257", GSEMatrix =TRUE, AnnotGPL=FALSE) # get GEO data from notebook
if (length(gset) > 1) idx <- grep("GPL10295", attr(gset, "names")) else idx <- 1 #
gset <- gset[[idx]]
# log2 transform
ex <- exprs(gset)
exprs(gset) <- log2(ex)
View(gset)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
View(gset)
gset
names(gset)
# group names for all samples (Simvastatin excluded)
sml <- c("G0","G0","G0","G1","G1","G1","X","X","X","X","X","X");
# eliminate samples marked as "X" (Simvastatin not used here)
sel <- which(sml != "X")
sel
gset[,1]
gset[,2]
gset[,3]
sml <- sml[sel]
sml
# group names for all samples (Simvastatin excluded)
sml <- c("Group_1");
# eliminate samples marked as "X" (Simvastatin not used here)
sel <- c(1)
```{r}
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
#Save the resulting table to file for reuse
filename <- "GSE21257.data.tsv"
outfile <- paste(basedir, resfolder, filename, sep="/")
write.table(tT, file=outfile,
quote = FALSE, dec=",", sep="\t", col.names = NA, row.names = T)
#Filtering: getting all lines with p-val<0.05
sel_ind<-which(tT$P.Value < 0.05)
selected_hits<-tT[sel_ind,3]
selected_phenotype<-tT[sel_ind,8]
names(selected_phenotype)<-selected_hits
selected_phenoIDs<-tT[c(3,2,6)] #selected phenoIDs
selected_phenoIDs[selected_phenoIDs$Symbol == "", ] <- "<NA>"
duplicata<-which(duplicated(selected_phenoIDs$Illumina_Gene))
selected_phenoIDs<-selected_phenoIDs[-duplicata,]
# Input 1: 'object', a TNI object with regulons
# Input 2: 'phenotype', a named numeric vector, usually log2 differential expression levels
# Input 3: 'hits', a character vector, usually a set of differentially expressed genes
# Input 4: 'phenoIDs', an optional data frame with gene anottation mapped to the phenotype
data(tnaData)
rtna <- tni2tna.preprocess(object = rtni,
phenotype = selected_phenotype,
hits = selected_hits,
)
#Filtering: getting all lines with p-val<0.05
sel_ind<-which(tT$P.Value < 0.05)
selected_hits<-tT[sel_ind,3]
selected_phenotype<-tT[sel_ind,8]
names(selected_phenotype)<-selected_hits
selected_phenoIDs<-tT[c(3,2,6)] #selected phenoIDs
selected_phenoIDs[selected_phenoIDs$Symbol == "", ] <- "<NA>"
duplicata<-which(duplicated(selected_phenoIDs$Illumina_Gene))
selected_phenoIDs<-selected_phenoIDs[-duplicata,]
# Input 1: 'object', a TNI object with regulons
# Input 2: 'phenotype', a named numeric vector, usually log2 differential expression levels
# Input 3: 'hits', a character vector, usually a set of differentially expressed genes
# Input 4: 'phenoIDs', an optional data frame with gene anottation mapped to the phenotype
data(tnaData)
rtna <- tni2tna.preprocess(object = rtni,
phenotype = selected_phenotype,
hits = selected_hits
)
#Without selection
hits<-tT$Illumina_Gene
phenotype<-tT$logFC
names(phenotype)<-hits
phenoIDs<-tT[c(3,2,6)] #selected phenoIDs
duplicata<-which(duplicated(phenoIDs$Illumina_Gene))
phenoIDs<-phenoIDs[-duplicata,]
```{r}
```{r}
```{r}
#Without selection
hits<-tT$Illumina_Gene
phenotype<-tT$logFC
names(phenotype)<-hits
phenoIDs<-tT[c(3,2,6)] #selected phenoIDs
duplicata<-which(duplicated(phenoIDs$Illumina_Gene))
phenoIDs<-phenoIDs[-duplicata,]
```{r}
phenotype
hits
```{r}
# Input 1: 'object', a TNI object with regulons
# Input 2: 'phenotype', a named numeric vector, usually log2 differential expression levels
# Input 3: 'hits', a character vector, usually a set of differentially expressed genes
# Input 4: 'phenoIDs', an optional data frame with gene anottation mapped to the phenotype
rtna <- tni2tna.preprocess(object = rtni,
phenotype = phenotype,
hits = hits
)
# Input 1: 'object', a TNI object with regulons
# Input 2: 'phenotype', a named numeric vector, usually log2 differential expression levels
# Input 3: 'hits', a character vector, usually a set of differentially expressed genes
# Input 4: 'phenoIDs', an optional data frame with gene anottation mapped to the phenotype
rtna <- tni2tna.preprocess(object = rtni,
phenotype = phenotype,
hits = selected_hits
)
# Run the MRA method
rtna <- tna.mra(rtna)
# Get MRA results;
#..setting 'ntop = -1' will return all results, regardless of a threshold
mra <- tna.get(rtna, what="mra", ntop = -1)
head(mra)
print(mra)
# Run the GSEA method
# Please set nPermutations >= 1000
rtna <- tna.gsea1(rtna, stepFilter=FALSE, nPermutations=1000)
# Get GSEA results
gsea1 <- tna.get(rtna, what="gsea1", ntop = -1)
head(gsea1)
gsea1
# Plot GSEA results
tna.plot.gsea1(rtna, labPheno="abs(log2 fold changes)", ntop = -1)
# Run the GSEA-2T method
# Please set nPermutations >= 1000
rtna <- tna.gsea2(rtna, stepFilter = FALSE, nPermutations = 1000)
# Installation of required packages, only run if not installed yet
# RTN for inferring the regulatory network based on the downloaded gene expression data
# snow for parallel processing in RTN
# RedeR for better visualization of inferred network
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# For main code
BiocManager::install("RTN")
BiocManager::install("snow")
# Load required libraries and open vignettes
# (A vignette is a long-form guide to your package.)
library(igraph)
library(RTN)
library(snow)
library(RedeR)
browseVignettes('RTN')
browseVignettes('RedeR')
# Note: no vignettes for snow, use snow.pdf found at https://cran.r-project.org/web/packages/snow/index.html
# For preprocessing
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2) # to prevent size connection error on getGEO
#readr::local_edition(1) # to prevent row.names error on getGEO
gset <- getGEO("GSE21257", GSEMatrix =TRUE, AnnotGPL=FALSE) # get GEO data from notebook
if (length(gset) > 1) idx <- grep("GPL10295", attr(gset, "names")) else idx <- 1 #
gset <- gset[[idx]]
# log2 transform
ex <- exprs(gset)
exprs(gset) <- log2(ex)
setwd("C:/Users/Alexis Trang/Documents/Cours_UPMC_M2/RESYS/Alexis_work/copy_dataset")
annotation <- read.csv(file = 'GPL10295-tbl-1.txt', skip = 7, sep = '\t')
gexpIDs <- annotation[,c('ID', 'Illumina_Gene', 'Symbol')]
setwd("C:/Users/Alexis Trang/Documents/Cours_UPMC_M2/RESYS/Alexis_work/copy_dataset")
tfs <- read.table("dt4rtn_TFs.txt")
tfs = setNames(tfs$V2, tfs$V1)
names(tfs) -> bkp
tfs <- annotation$ID[match(names(tfs), annotation$Symbol)]
tfs <- as.character(tfs)
names(tfs) <- bkp
tfs <- tfs[-which(is.na(tfs))]
rtni <- tni.constructor(expData=ex, regulatoryElements=tfs, rowAnnotation=gexpIDs, cvfilter=T)
rtni <- tni.constructor(expData=ex, regulatoryElements=tfs, rowAnnotation=gexpIDs, cvfilter=T)
rtni <- tni.permutation(rtni, nPermutations = 1000)
rtni <- tni.bootstrap(rtni)
rtni <- tni.dpi.filter(rtni)
tni.regulon.summary(rtni)
tni.regulon.summary(rtni)
regulons <- tni.get(rtni, what = "regulons.and.mode", idkey = "SYMBOL")
regulons$FOXM1
g <- tni.graph(rtni, tfs = c("FOXM1","E2F2","PTTG1"))
g <- tni.graph(rtni, tfs = names(tfs))
rdp <- RedPort()
calld(rdp)
addGraph(rdp, g, layout=NULL)
addLegend.color(rdp, g, type="edge")
addLegend.shape(rdp, g)
relax(rdp, ps = TRUE)
library(limma)
## move to a project folder and create a result folder in it
basedir <- "C:/Users/Alexis Trang/Documents/Cours_UPMC_M2/RESYS/Alexis_work"
setwd(basedir)
resfolder <- "GEO2R.GSE21257.results"
if (! file.exists(resfolder) ){
dir.create(resfolder, showWarnings = FALSE, recursive = FALSE, mode = "0777")
Sys.chmod(resfolder, mode = "0777", use_umask=TRUE)
}
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples (Simvastatin excluded)
sml <- c("Group_1");
# eliminate samples marked as "X" (Simvastatin not used here)
sel <- c(1)
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
#set up the DE contrasts and proceed with analysis
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# group names for all samples (Simvastatin excluded)
sml <- c("Group_1");
#set up the DE contrasts and proceed with analysis
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
# eliminate samples marked as "X" (Simvastatin not used here)
sel <- c(1)
#set up the DE contrasts and proceed with analysis
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
#set up the DE contrasts and proceed with analysis
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
# group names for all samples (Simvastatin excluded)
sml <- c("Group_1","Group_2");
# eliminate samples marked as "X" (Simvastatin not used here)
sel <- c(1,2)
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
#set up the DE contrasts and proceed with analysis
fl <- as.factor(sml)
gset$description <- fl
load("~/Cours_UPMC_M2/RESYS/Alexis_work/Environement_16_11_2021_02_39.RData")
rtna
rtna
mra
