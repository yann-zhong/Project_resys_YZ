plot(cars)
install.packages("learnr")
# Installation of required packages
# RTN for inferring the regulatory network based on the downloaded gene expression data
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RTN")
# Installation of required packages
# RTN for inferring the regulatory network based on the downloaded gene expression data
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RTN")
BiocManager::install("RedeR")
library(backports)
detach("package:backports", unload = TRUE)
library(BiocManager)
library(BiocGenerics)
library(BiocVersion)
BiocManager::install("snow")
# log2 transform
ex <- exprs(gset)
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE21257", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL10295", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# log2 transform
ex <- exprs(gset)
exprs(gset) <- log2(ex)
# Get the GENE NAMES
# Download full table here https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GPL10295
annotation <- read.csv(file = 'GPL10295.txt', skip = 7, sep = '\t')
gexpIDs <- annotation[,c('ID', 'Illumina_Gene', 'Symbol')]
# Start RTN
library(RTN)
data(dt4rtn)
tfs <- dt4rtn$tfs
names(tfs) -> bkp
tfs <- annotation$ID[match(names(tfs), annotation$Symbol)]
tfs <- as.character(tfs)
names(tfs) <- bkp
tfs <- tfs[-which(is.na(tfs))]
rtni <- tni.constructor(expData=ex, regulatoryElements=tfs, rowAnnotation=gexpIDs, cvfilter=T)
library(Biobase)
library(GEOquery)
BiocManager::install("Biobase")
BiocManager::install("GEOquery")
library(Biobase)
library(GEOquery)
# load series and platform data from GEO
gset <- getGEO("GSE21257", GSEMatrix =TRUE, AnnotGPL=FALSE)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2) # to prevent error on following lines
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2) # to prevent error on following lines
gset <- getGEO("GSE21257", GSEMatrix =TRUE, AnnotGPL=FALSE)
gset <- getGEO("GSE21257", GSEMatrix =TRUE, AnnotGPL=FALSE)
# Installation of required packages, only run if not installed yet
# RTN for inferring the regulatory network based on the downloaded gene expression data
# snow for parallel processing in RTN
# RedeR for better visualization of inferred network
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# For main code
BiocManager::install("RTN")
BiocManager::install("snow")
BiocManager::install("RedeR")
# For preprocessing
BiocManager::install("Biobase")
BiocManager::install("GEOquery")
# Load required libraries and open vignettes
# (A vignette is a long-form guide to your package.)
library(igraph)
library(RTN)
library(snow)
library(RedeR)
browseVignettes('RTN')
browseVignettes('RedeR')
# Note: no vignettes for snow, use snow.pdf found at https://cran.r-project.org/web/packages/snow/index.html
# For preprocessing
library(Biobase)
library(GEOquery)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2) # to prevent error on following lines
gset <- getGEO("GSE21257", GSEMatrix =TRUE, AnnotGPL=FALSE)
readr::local_edition(1)
gset <- getGEO("GSE21257", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL10295", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# log2 transform
ex <- exprs(gset)
exprs(gset) <- log2(ex)
View(ex)
# Get the GENE NAMES
# Download full table here https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GPL10295
annotation <- read.csv(file = 'GPL10295.txt', skip = 7, sep = '\t')
# Get the GENE NAMES
# Download full table here https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GPL10295
annotation <- read.csv(file = 'GPL10295-tbl-1.txt', skip = 7, sep = '\t')
gexpIDs <- annotation[,c('ID', 'Illumina_Gene', 'Symbol')]
# Get the GENE NAMES
# Download full table here https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GPL10295
annotation <- read.csv(file = 'GPL10295-tbl-1.txt', skip = 7, sep = '\t')
gexpIDs <- annotation[,c('ID', 'Illumina_Gene', 'Symbol')]
data(dt4rtn)
tfs <- dt4rtn$tfs
View(gset)
View(gset)
View(gset)
gset
gset[[1]]
gset[1]
?exprs
?exprs
exprs(gset)
log2((exprs))
ex <- exprs(gset)
exprs(gset) <- log2(ex)
?getGEO
#DEBUGGING
library(RTN)
data(tniData)
#data(dt4rtn_TFs)
tfs <- read.table("dt4rtn_TFs.txt")
tfs = setNames(tfs$V2, tfs$V1)
names(tfs) -> bkp
tfs <- annotation$ID[match(names(tfs), annotation$Symbol)]
tfs <- as.character(tfs)
names(tfs) <- bkp
tfs <- tfs[-which(is.na(tfs))]
rtni <- tni.constructor(expData=ex, regulatoryElements=tfs, rowAnnotation=gexpIDs, cvfilter=T)
# Create an object comprised of all regulons
regulons <- tni.get(rtni, what = "regulons.and.mode", idkey = "SYMBOL")
View(regulons)
# Create an object comprised of all regulons
regulons <- tni.get(rtni, what = "regulons.and.mode", idkey = "SYMBOL")
head(regulons$AEBP1)
load("D:/Documents/M2 BIM Info/RESYS/Projet/Project_resys_YZ/Alexis_work/Environement_16_11_2021_01_29.RData")
View(regulons)
rdp <- RedPort()
# Load required libraries and open vignettes
# (A vignette is a long-form guide to your package.)
library(igraph)
library(RTN)
library(snow)
library(RedeR)
library(limma)
# For preprocessing
library(Biobase)
library(GEOquery)
rdp <- RedPort()
calld(rdp)
View(ex)
View(gset)
load("D:/Documents/M2 BIM Info/RESYS/Projet/Project_resys_YZ/yann_code/rtni_backup.RData")
rm(list = ls())
gc()
load("D:/Documents/M2 BIM Info/RESYS/Projet/Project_resys_YZ/yann_code/rtni_backup.RData")
# Infer an RTN by permutation analysis, with 1000 permutations
rtni <- tni.permutation(rtni, nPermutations = 1000)
gc()
# Remove unstable interactions
rtni <- tni.bootstrap(rtni)
# Run ARACNE to remove weakest interactions in any triplet
rtni <- tni.dpi.filter(rtni)
# Regulon information
tni.regulon.summary(rtni)
#write.table(rtni, file = "rtni.txt", sep = "\t")
#write.csv(rtni, file = "rtni.csv")
library(readr)
#write_tsv(rtni, file = "rtni.txt")
#write_csv(rtni, file = "rtni.csv")
# Create an object comprised of all regulons
regulons <- tni.get(rtni, what = "regulons.and.mode", idkey = "SYMBOL")
# With all elements:
g <- tni.graph(rtni, regulatoryElements = names(regulons))
rdp <- RedPort()
calld(rdp)
# With list of top 10 hits:
g <- tni.graph(rtni, regulatoryElements = c("ZNF91","ZNF264","YEATS4","TRPS1","SOX2","PAX7","MYCN","IRF7","IRF8","HIF1A"))
addGraph(rdp, g, layout=NULL)
browseVignettes('RedeR')
View(gset)
knit_with_parameters("D:/Documents/M2 BIM Info/RESYS/Projet/Project_resys_YZ/Alexis_work/TEST - Copie.Rmd", encoding = "UTF-8")
